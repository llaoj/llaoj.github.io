<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technology on 老J的博客</title><link>https://blog.llaoj.cn/categories/technology/</link><description>Recent content in Technology on 老J的博客</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Wed, 15 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.llaoj.cn/categories/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>RBAC给默认服务账号default赋予namespace级别权限</title><link>https://blog.llaoj.cn/posts/2025/default-sa-rbac/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/default-sa-rbac/</guid><description>给默认的服务账号service account: default赋予当前namespace的最高权限, 但是仅有这些权限.创建namespace之后, 里面会自带一个默认的service account, 名字是default. 它是没有任何权限的.Error from server (Forbidden): pods is forbidden: User system:serviceaccount:test-namespace:default cannot list resource pods in API group in the namespace default Error from server (Forbidden): storageclasses.storage.k8s.io is forbidden: User system:serviceaccount:test-namespace:default cannot list resource storageclasses in API group storage.k8s.io at the cluster scope</description></item><item><title>国内网络环境安装Istio Ambient</title><link>https://blog.llaoj.cn/posts/2025/install-istio-ambient/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/install-istio-ambient/</guid><description>&lt;p>这篇文章的主要目的是解决国内安装istio ambient速度比较慢、甚至是失败的问题. 因为国内防火墙的原因, 有些资源是拉不到或者速度很慢的.&lt;/p>
&lt;p>安装之前需要有一套kubernetes集群, 集群的版本为&lt;code>1.28, 1.29, 1.30, 1.31&lt;/code>&lt;/p>
&lt;h2 id="下载istio-cli">
 下载Istio CLI
 &lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bdistio-cli">#&lt;/a>
&lt;/h2>
&lt;p>截止目前最新的Istio稳定版本为: &lt;code>1.24.2&lt;/code>, 我们今天就安装它.
Istio通过istioctl来配置/安装的. 现在我们需要下载它, 以及一些样例应用:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># 目前只支持1.24.2版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s https://blog.llaoj.cn/posts/2025/install-istio-ambient/download-istio.sh | bash -s -- 1.24.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0086b3">cd&lt;/span> istio-1.24.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0086b3">export&lt;/span> &lt;span style="color:#008080">PATH&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#008080">$PWD&lt;/span>/bin:&lt;span style="color:#008080">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用下面的命令检查一下版本, 现在Istio还没有安装:&lt;/p></description></item><item><title>解决kubernetes中pod连接外部Redis速度慢的问题</title><link>https://blog.llaoj.cn/posts/2025/fix-tcp-retran/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/fix-tcp-retran/</guid><description>&lt;h2 id="问题描述">
 问题描述
 &lt;a class="anchor" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;p>用户反应, 在kubernetes中部署的pod去访问外部的redis时, 速度很慢.&lt;br>
redis地址: &lt;code>10.193.96.73:20100,10.193.96.73:20101,10.193.96.188:20100,10.193.96.188:20101,10.193.96.189:20100,10.193.96.189:20101&lt;/code>&lt;/p>
&lt;p>已知:&lt;/p>
&lt;ul>
&lt;li>pod ip: 10.194.43.122&lt;/li>
&lt;li>pod所在机器ip: 10.193.40.57&lt;/li>
&lt;/ul>
&lt;h2 id="tcpdump抓包">
 tcpdump抓包
 &lt;a class="anchor" href="#tcpdump%e6%8a%93%e5%8c%85">#&lt;/a>
&lt;/h2>
&lt;p>我们选择一个redis端点(10.193.96.188:20101)抓包, 登录pod所在node(10.193.40.57)执行抓包:&lt;/p>
&lt;p>&lt;code>tcpdump -n -i eth0 'host 10.193.96.188 and port 20101'&lt;/code>&lt;/p></description></item><item><title>安装高可用ETCD集群(非https)</title><link>https://blog.llaoj.cn/posts/2025/install-etcd-cluster/</link><pubDate>Tue, 14 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/install-etcd-cluster/</guid><description>&lt;p>安装1个etcd集群要求:&lt;/p>
&lt;ul>
&lt;li>三台服务器&lt;/li>
&lt;li>开启auth认证&lt;/li>
&lt;li>使用http, 不使用https加密&lt;/li>
&lt;li>开启用户名/密码认证&lt;/li>
&lt;/ul>
&lt;p>因为我们部署的是内部的可信的服务, 而且只局限在三台服务器中使用, 给apisix做存储使用. 为了简化部署, 减少管理证书的复杂性. 我没有开启https.&lt;/p>
&lt;h2 id="服务器情况">
 服务器情况
 &lt;a class="anchor" href="#%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%83%85%e5%86%b5">#&lt;/a>
&lt;/h2>
&lt;p>服务器三台, IP地址分别为: 10.61.129.19-21. centos7.9的操作系统.&lt;/p>
&lt;h2 id="本节需要在每一台服务器上执行">
 本节需要在每一台服务器上执行
 &lt;a class="anchor" href="#%e6%9c%ac%e8%8a%82%e9%9c%80%e8%a6%81%e5%9c%a8%e6%af%8f%e4%b8%80%e5%8f%b0%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8a%e6%89%a7%e8%a1%8c">#&lt;/a>
&lt;/h2>
&lt;h3 id="部署可执行文件">
 部署可执行文件
 &lt;a class="anchor" href="#%e9%83%a8%e7%bd%b2%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6">#&lt;/a>
&lt;/h3>
&lt;p>将etcd安装在&lt;code>/data/etcd/&lt;/code>目录中.&lt;/p></description></item><item><title>在虚拟机上安装APISIX集群</title><link>https://blog.llaoj.cn/posts/2025/install-apisix-cluster/</link><pubDate>Tue, 14 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/install-apisix-cluster/</guid><description>&lt;p>我们会在下面三台服务器上部署, 服务器列表:&lt;/p>
&lt;ul>
&lt;li>10.61.129.19&lt;/li>
&lt;li>10.61.129.20&lt;/li>
&lt;li>10.61.129.21&lt;/li>
&lt;/ul>
&lt;p>下面的所有操作需要在上述三台服务器上操作.&lt;/p>
&lt;h2 id="前置条件-etcd集群">
 前置条件-ETCD集群
 &lt;a class="anchor" href="#%e5%89%8d%e7%bd%ae%e6%9d%a1%e4%bb%b6-etcd%e9%9b%86%e7%be%a4">#&lt;/a>
&lt;/h2>
&lt;p>参考
 &lt;a href="https://blog.llaoj.cn/posts/2025/install-etcd-cluster/">安装高可用ETCD集群(非https)&lt;/a>完成etcd集群的安装.&lt;/p>
&lt;h2 id="安装apisix可执行文件">
 安装apisix可执行文件
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85apisix%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6">#&lt;/a>
&lt;/h2>
&lt;p>我们使用官方提供的rpm包安装.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>yum install -y https://repos.apiseven.com/packages/centos/apache-apisix-repo-1.0-1.noarch.rpm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install apisix-3.2.0 -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成之后, 我们要知道安装的位置, 一些常用的文件夹地址.&lt;/p></description></item><item><title>解决Harbor漏洞扫描trivy失败</title><link>https://blog.llaoj.cn/posts/2025/fix-harbor-trivy-failure/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/fix-harbor-trivy-failure/</guid><description>点击查看日志, 错误日志如下：[/pkg/scan/job.go:294]: check scan report with mime type application/vnd.security.vulnerability.report; version=1.1: running trivy wrapper: running trivy: exit status 2: 2025-01-08T01:53:26.342Z	[INFO]	Vulnerability scanning is enabled panic: invalid page type: 39: 10 go.etcd.io/bbolt.(*Cursor).search 看日志中的错误堆栈, 我发现在读取trivy数据库文件的时候报错了, 所以我的解决办法是, 删掉原来的数据库文件, 让trivy重建一个. 我把Harbor的数据目录放在了&lt;code>/data/harbor_data&lt;/code>, 你可根据自己的实际情况替换.</description></item><item><title>解决执行kubectl命令没有权限</title><link>https://blog.llaoj.cn/posts/2025/fix-kubectl-no-authorization/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2025/fix-kubectl-no-authorization/</guid><description>&lt;h2 id="问题描述">
 问题描述
 &lt;a class="anchor" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;p>反应执行kubectl命令没有权限:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ kubectl get pod -A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error from server (Forbidden): pods is forbidden: User &amp;#34;kubernetes-admin&amp;#34; cannot list resource &amp;#34;pods&amp;#34; in API group &amp;#34;&amp;#34; at the cluster scope
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解决思路">
 解决思路
 &lt;a class="anchor" href="#%e8%a7%a3%e5%86%b3%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h2>
&lt;p>首先要了解几个文件夹的作用:&lt;/p></description></item><item><title>解决Velero报错: failed to list daemonset pods: client rate limiter Wait returned an error: context deadline exceeded</title><link>https://blog.llaoj.cn/posts/2309/velero-failed-to-list-daemonset-pods/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2309/velero-failed-to-list-daemonset-pods/</guid><description>使用VeleroFSB备份集群的时候, 遇到了一些错误, 导致整个备份任务没有成功, 状态: &lt;code>PartiallyFailed&lt;/code>: failed to list daemonset pods: client rate limiter Wait returned an error: context deadline exceeded</description></item><item><title>通过shell脚本扫描从Kubernetes节点往外的tcp请求</title><link>https://blog.llaoj.cn/posts/2304/container-tcp-conn/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2304/container-tcp-conn/</guid><description>由于Kubernetes中部署的服务队外发起的tcp请求很难监控, 最近数据库运维在排查来自集群的大量数据库请求, 网络层只能看到来自哪个Kubernetes节点主机. 所以写了下面这个脚本来定时扫描.</description></item><item><title>使用docker运行orcale xe 11g</title><link>https://blog.llaoj.cn/posts/2210/docker-oracle-xe-11g/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2210/docker-oracle-xe-11g/</guid><description>&lt;p>&lt;strong>注意&lt;/strong>: 根据自己实际情况, 替换下面名利中的&lt;code>&amp;lt;var&amp;gt;&lt;/code>变量.&lt;/p>
&lt;h2 id="启动orcale-xe-11g容器">
 启动orcale xe 11g容器
 &lt;a class="anchor" href="#%e5%90%af%e5%8a%a8orcale-xe-11g%e5%ae%b9%e5%99%a8">#&lt;/a>
&lt;/h2>
&lt;p>Oracle Database XE是人人都可免费使用的 Oracle 数据库. Oracle Database XE 支持最高:&lt;/p>
&lt;ul>
&lt;li>最多 12 GB 的用户磁盘数据&lt;/li>
&lt;li>最大 2 GB 的数据库 RAM&lt;/li>
&lt;li>最多 2 个 CPU 线程&lt;/li>
&lt;/ul>
&lt;p>产品介绍地址: 
 &lt;a href="https://www.oracle.com/cn/database/technologies/appdev/xe.html">https://www.oracle.com/cn/database/technologies/appdev/xe.html&lt;/a>&lt;/p></description></item><item><title>使用fluentd收集kubernetes日志并推送给kafka</title><link>https://blog.llaoj.cn/posts/2211/fluentd-kafka/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2211/fluentd-kafka/</guid><description>&lt;p>这篇文章使用fluentd官方提供的kubernetes部署方案daemonset来部署日志收集, 参考项目地址:&lt;/p>
&lt;ul>
&lt;li>
 &lt;a href="https://github.com/fluent/fluentd-kubernetes-daemonset">https://github.com/fluent/fluentd-kubernetes-daemonset&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>本文使用的kubernetes版本为: &lt;code>1.22.8&lt;/code>&lt;/p>
&lt;p>使用fluentd镜像为: &lt;code>fluent/fluentd-kubernetes-daemonset:v1.15.2-debian-kafka2-1.0&lt;/code>&lt;/p>
&lt;p>请注意下文配置中&lt;code>&amp;lt;var&amp;gt;&lt;/code>标记, 需要根据需求自行替换.&lt;/p>
&lt;h2 id="创建命名空间">
 创建命名空间
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4">#&lt;/a>
&lt;/h2>
&lt;p>本项目所有的资源创建在logging下, 先创建它:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl create ns fluentd-kafka
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="先创建服务账号">
 先创建服务账号
 &lt;a class="anchor" href="#%e5%85%88%e5%88%9b%e5%bb%ba%e6%9c%8d%e5%8a%a1%e8%b4%a6%e5%8f%b7">#&lt;/a>
&lt;/h2>
&lt;p>创建服务账号并赋予集群查看的权限, 使用下面的命令:&lt;/p></description></item><item><title>使用fluentd收集kubernetes日志并推送到ES</title><link>https://blog.llaoj.cn/posts/2209/fluentd-kubernetes-daemonset/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2209/fluentd-kubernetes-daemonset/</guid><description>&lt;p>这篇文章使用fluentd官方提供的kubernetes部署方案daemonset来部署日志收集, 参考项目地址:&lt;/p>
&lt;ul>
&lt;li>
 &lt;a href="https://github.com/fluent/fluentd-kubernetes-daemonset">https://github.com/fluent/fluentd-kubernetes-daemonset&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>本文使用的kubernetes版本为: &lt;code>1.22.8&lt;/code>&lt;/p>
&lt;p>使用fluentd镜像为: &lt;code>fluent/fluentd-kubernetes-daemonset:v1.15.2-debian-elasticsearch7-1.0&lt;/code>&lt;/p>
&lt;p>请注意下文配置中&lt;code>&amp;lt;var&amp;gt;&lt;/code>标记, 需要根据需求自行替换.&lt;/p>
&lt;h2 id="创建命名空间">
 创建命名空间
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%91%bd%e5%90%8d%e7%a9%ba%e9%97%b4">#&lt;/a>
&lt;/h2>
&lt;p>本项目所有的资源创建在logging下, 先创建它:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008080">NAMESPACE&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create ns &lt;span style="color:#008080">$NAMESPACE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="先创建服务账号">
 先创建服务账号
 &lt;a class="anchor" href="#%e5%85%88%e5%88%9b%e5%bb%ba%e6%9c%8d%e5%8a%a1%e8%b4%a6%e5%8f%b7">#&lt;/a>
&lt;/h2>
&lt;p>创建服务账号并赋予集群查看的权限, 使用下面的命令:&lt;/p></description></item><item><title>Envoy的静态配置使用方法</title><link>https://blog.llaoj.cn/posts/2209/envoy-usage/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2209/envoy-usage/</guid><description>&lt;h2 id="envoy静态配置">
 Envoy静态配置
 &lt;a class="anchor" href="#envoy%e9%9d%99%e6%80%81%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;h3 id="l4转发">
 L4转发
 &lt;a class="anchor" href="#l4%e8%bd%ac%e5%8f%91">#&lt;/a>
&lt;/h3>
&lt;p>下面的例子是配置4层转发, 将443端口的流量都代理到&lt;code>www.example.com&lt;/code>对应的后端的443端口上, 如下:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080">static_resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">listeners&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>listener_0&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">address&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">socket_address&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">protocol&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>TCP&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">address&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">0.0.0.0&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">port_value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">443&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">filter_chains&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">filters&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>envoy.filters.network.tcp_proxy&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">typed_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">&amp;#34;@type&amp;#34;: &lt;/span>type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">stat_prefix&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>tcp_443&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">cluster&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>cluster_0&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">clusters&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>cluster_0&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>LOGICAL_DNS&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">dns_lookup_family&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>V4_ONLY&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">load_assignment&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">cluster_name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>cluster_0&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">endpoints&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">lb_endpoints&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000080">endpoint&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">address&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">socket_address&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">address&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>www.example.com&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">port_value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#099">443&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动envoy">
 启动Envoy
 &lt;a class="anchor" href="#%e5%90%af%e5%8a%a8envoy">#&lt;/a>
&lt;/h2>
&lt;p>将创建的静态配置文件&lt;code>envoy-custom.yaml&lt;/code>映射到容器内部, 启动:&lt;/p></description></item><item><title>使用rsync在主机之间同步目录</title><link>https://blog.llaoj.cn/posts/2208/rsync-usage/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2208/rsync-usage/</guid><description>&lt;h2 id="rsync安装">
 rsync安装
 &lt;a class="anchor" href="#rsync%e5%ae%89%e8%a3%85">#&lt;/a>
&lt;/h2>
&lt;p>在传输双方的服务器上都安装rsync软件. 如果服务器上有rsync可以跳过.&lt;/p>
&lt;p>先检查有没有安装rsync:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rsync -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果没有安装, 使用下面的命令安装:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Debian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install rsync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Red Hat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo yum install rsync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic"># Arch Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pacman -S rsync
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动rsync守护进程">
 启动rsync守护进程
 &lt;a class="anchor" href="#%e5%90%af%e5%8a%a8rsync%e5%ae%88%e6%8a%a4%e8%bf%9b%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;p>rsync使用最多的是ssh模式. 在现代的公司中, 出于安全的原因, 很多ssh是被禁止使用的. 所以, 我们可以使用rsync的守护进程模式. 一起看看怎么用吧.&lt;/p></description></item><item><title>使用etcdctl查看kubernetes存储的内容</title><link>https://blog.llaoj.cn/posts/2208/kubernetes-etcdctl-usage/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2208/kubernetes-etcdctl-usage/</guid><description>&lt;p>因为etcd中的内容都是加密的, 使用下面的命令安装解密工具:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>mkdir auger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -o ./auger/auger_1.0.2_linux_amd64.tar.gz &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> https://llaoj.oss-cn-beijing.aliyuncs.com/files/github.com/etcd-io/auger/releases/download/v1.0.2/auger_1.0.2_linux_amd64.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -xvf ./auger/auger_1.0.2_linux_amd64.tar.gz -C ./auger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv ./auger/auger /usr/local/bin/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf ./auger
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面这个脚本提供了etcdctl连接etcd所需要的端点、证书相关的信息. 这个脚本需要在master节点上执行:&lt;/p></description></item><item><title>MetalLB二层模式使用指南</title><link>https://blog.llaoj.cn/posts/2208/metallb-l2-usage/</link><pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2208/metallb-l2-usage/</guid><description>&lt;p>
 &lt;a href="https://blog.llaoj.cn/posts/2205/metalb/">MetalLB概念安装配置和使用请查看&lt;/a>&lt;/p>
&lt;h2 id="测试组件的版本情况">
 测试组件的版本情况
 &lt;a class="anchor" href="#%e6%b5%8b%e8%af%95%e7%bb%84%e4%bb%b6%e7%9a%84%e7%89%88%e6%9c%ac%e6%83%85%e5%86%b5">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>kubernetes: v1.22.8&lt;/li>
&lt;li>metellb: v0.10.3&lt;/li>
&lt;li>nginx: latest&lt;/li>
&lt;/ul>
&lt;h2 id="创建测试应用">
 创建测试应用
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e5%ba%94%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>创建一个nginx服务和service资源:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl -n without-istio create deploy nginx --image&lt;span style="color:#000;font-weight:bold">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="测试分配ip">
 测试分配IP
 &lt;a class="anchor" href="#%e6%b5%8b%e8%af%95%e5%88%86%e9%85%8dip">#&lt;/a>
&lt;/h2>
&lt;p>创建loadbalancer类型的service:&lt;/p></description></item><item><title>在istio service mesh中使用nginx反向代理</title><link>https://blog.llaoj.cn/posts/2208/istio-with-nginx-reserve-proxy/</link><pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2208/istio-with-nginx-reserve-proxy/</guid><description>&lt;p>nginx反向代理的请求, 和我们直接请求有一定的区别, 比如:&lt;/p>
&lt;h2 id="http-version">
 http version
 &lt;a class="anchor" href="#http-version">#&lt;/a>
&lt;/h2>
&lt;p>nginx proxy 发出的反向代理请求的http version默认是: 1.0, 但是istio支持1.1 &amp;amp; 2.0, 所以如果不增加http版本限制的话istio就无法进行报文解析, 也就无法应用istio-proxy(sidecar)L7层代理策略, 我们知道istio流量治理是基于L7层的.&lt;/p>
&lt;h2 id="http-header-host">
 http header: Host
 &lt;a class="anchor" href="#http-header-host">#&lt;/a>
&lt;/h2>
&lt;p>有时候nginx发出的代理请求的http header中host的值, 不能保证是上游服务的host name. 在这种情况下, 是没办法匹配上游服务在istio-proxy中的L7流量治理的配置.&lt;/p></description></item><item><title>Fluentd配置文件最佳实践</title><link>https://blog.llaoj.cn/posts/2207/fluentd-es-config/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2207/fluentd-es-config/</guid><description>Fluentd负责Kubernetes中容器日志的收集工作, 以Daemonset形式运行在每一个节点上. 下面这个配置是在多个生产集群使用的配置, 经过多次调优的. 有一些关键的配置增加了配置解释说明. 目前使用问题不大. 持续更新配置中&amp;hellip;</description></item><item><title>Kubernetes 服务器配置和规划建设要求</title><link>https://blog.llaoj.cn/posts/2207/kubernetes-requirement/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2207/kubernetes-requirement/</guid><description>&lt;p>新建集群的第一步就是要规划服务器、网络、操作系统等等, 下面就结合我平时的工作经验总结下相关的要求, 内容根据日常工作持续补充完善:&lt;/p>
&lt;h2 id="服务器配置">
 服务器配置
 &lt;a class="anchor" href="#%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;p>kubernetes 集群分为控制节点和数据节点, 它们对于配置的要求有所不同:&lt;/p>
&lt;h3 id="控制面">
 控制面
 &lt;a class="anchor" href="#%e6%8e%a7%e5%88%b6%e9%9d%a2">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">节点规模&lt;/th>
 &lt;th style="text-align: left">Master规格&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">1~5个节点&lt;/td>
 &lt;td style="text-align: left">4核 8Gi（不建议2核 4Gi）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">6~20个节点&lt;/td>
 &lt;td style="text-align: left">4核 16Gi&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">21~100个节点&lt;/td>
 &lt;td style="text-align: left">8核 32Gi&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">100~200个节点&lt;/td>
 &lt;td style="text-align: left">16核 64Gi&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>系统盘40+Gi，用于储存 etcd 信息及相关配置文件等&lt;/p></description></item><item><title>MetalLB概念安装配置和使用</title><link>https://blog.llaoj.cn/posts/2205/metalb/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2205/metalb/</guid><description>&lt;p>
 &lt;a href="https://metallb.universe.tf/">官方文档&lt;/a>&lt;/p>
&lt;h2 id="为什么使用">
 为什么使用?
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>Kubernetes没有提供适用于裸金属集群的网络负载均衡器实现, 也就是&lt;code>LoadBalancer&lt;/code>类型的Service. Kubernetes 附带的网络负载均衡器的实现都是调用各种 IaaS 平台（GCP、AWS、Azure ……）的胶水代码。 如果您没有在受支持的 IaaS 平台（GCP、AWS、Azure&amp;hellip;）上运行，LoadBalancers 在创建时将一直保持在&lt;code>pending&lt;/code>状态。&lt;/p>
&lt;p>裸金属集群的运维人员只剩下两个方式来将用户流量引入集群内: &lt;code>NodePort&lt;/code>和&lt;code>externalIPs&lt;/code>. 这两种在生产环境使用有很大的缺点, 这样, 裸金属集群也就成了 Kubernetes 生态中的第二类选择, 并不是首选.&lt;/p>
&lt;p>MetalLB 的目的是实现一个网络负载均衡器来与标准的网络设备集成, 这样这些外部服务就能尽可能的正常工作了.&lt;/p></description></item><item><title>Linux 控制组(cgroups)和进程隔离</title><link>https://blog.llaoj.cn/posts/2205/cgroups-process-isolation/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2205/cgroups-process-isolation/</guid><description>控制组(cgroups)是内核的一个特性，它能限制/统计/隔离一个或者多个进程使用CPU、内存、磁盘I/O和网络。cgroups技术最开始是Google开发，最终在2.6.24版本的内核中出现。3.15和3.16版本内核将合并进重新设计的cgroups，它添加来kernfs(拆分一些sysfs逻辑)。cgroups的主要设计目标是提供一个统一的接口，它可以管理进程或者整个操作系统级别的虚拟化，包含Linux容器，或者LXC。</description></item><item><title>分析告警 kubernetes 节点 load 过高问题</title><link>https://blog.llaoj.cn/posts/2204/kubernetes-node-load/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2204/kubernetes-node-load/</guid><description>&lt;h2 id="负载过高分析">
 负载过高分析
 &lt;a class="anchor" href="#%e8%b4%9f%e8%bd%bd%e8%bf%87%e9%ab%98%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h2>
&lt;p>通过 linux 提供的几个命令可以从不同的纬度分析系统负载。&lt;/p>
&lt;h3 id="vmstat">
 vmstat
 &lt;a class="anchor" href="#vmstat">#&lt;/a>
&lt;/h3>
&lt;p>这命令能从一个系统的角度反应出服务器情况，报告虚拟内存统计信息，报告有关进程、内存、分页、块的信息 IO、陷阱、磁盘和 CPU 活动。看个例子：&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ vmstat --wide --unit M &lt;span style="color:#099">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>procs ----------------memory---------------- ---swap--- -----io---- ---system--- ---------cpu--------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r b swpd free buff cache si so bi bo in cs us sy id wa st
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">127691&lt;/span> &lt;span style="color:#099">1535&lt;/span> &lt;span style="color:#099">73572&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">3&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">2&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">97&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#099">93&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">127674&lt;/span> &lt;span style="color:#099">1535&lt;/span> &lt;span style="color:#099">73573&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">80&lt;/span> &lt;span style="color:#099">49267&lt;/span> &lt;span style="color:#099">67634&lt;/span> &lt;span style="color:#099">5&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">94&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">2&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">127679&lt;/span> &lt;span style="color:#099">1535&lt;/span> &lt;span style="color:#099">73573&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">66&lt;/span> &lt;span style="color:#099">38537&lt;/span> &lt;span style="color:#099">56283&lt;/span> &lt;span style="color:#099">3&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">95&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#099">2&lt;/span> &lt;span style="color:#099">2&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">127738&lt;/span> &lt;span style="color:#099">1535&lt;/span> &lt;span style="color:#099">73574&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">6&lt;/span> &lt;span style="color:#099">86&lt;/span> &lt;span style="color:#099">41769&lt;/span> &lt;span style="color:#099">61823&lt;/span> &lt;span style="color:#099">5&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">93&lt;/span> &lt;span style="color:#099">2&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#099">2&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">127729&lt;/span> &lt;span style="color:#099">1535&lt;/span> &lt;span style="color:#099">73574&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">18&lt;/span> &lt;span style="color:#099">18&lt;/span> &lt;span style="color:#099">41002&lt;/span> &lt;span style="color:#099">59214&lt;/span> &lt;span style="color:#099">4&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#099">95&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令以及输出解释：&lt;/p></description></item><item><title>Apisxi Ingress Controller 设计说明</title><link>https://blog.llaoj.cn/posts/2204/apisix-ingress-controller-design/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2204/apisix-ingress-controller-design/</guid><description>apisix-ingress-controller 要求 kubernetes 版本 1.16+. 因为使用了 CustomResourceDefinition v1 stable 版本的 API. 从 1.0.0 版本开始，APISIX-ingress-controller 要求 Apache APISIX 版本 2.7+.</description></item><item><title>Grafana Mimir 发布 目前最具扩展性的开源时序数据库</title><link>https://blog.llaoj.cn/posts/2204/announcing-grafana-mimir/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2204/announcing-grafana-mimir/</guid><description>Grafana Mimir 是目前最具扩展性、性能最好的开源时序数据库，Mimir 允许你将指标扩展到 1 亿。它部署简单、高可用、多租户支持、持久存储、查询性能超高，比 Cortex 快 40 倍。 Mimir 托管在 
 &lt;a href="https://github.com/grafana/mimir">https://github.com/grafana/mimir&lt;/a> 并在 AGPLv3 下获得许可。</description></item><item><title>在 kubernetes 中找出使用 jdk9 及以上版本的应用</title><link>https://blog.llaoj.cn/posts/2203/execjava-versioninpod/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/execjava-versioninpod/</guid><description>近日, Spring Cloud (SPEL) 中发现 RCE 0-day 漏洞, 为了排查 kubernetes 中所有存在安全威胁的应用. 特地开发了一个小工具来寻找。该工具基于 golang&amp;amp;client-go 开发, 程序会找出当前集群中所有 Running 的 pods, 然后逐个进入容器，执行 &lt;code>java -version&lt;/code> 命令，将命令输出打印到文件中，使用编辑器进行查找检索即可。</description></item><item><title>Harbor 双主复制解决方案实践</title><link>https://blog.llaoj.cn/posts/2203/harbor-dual-master-replication-ha/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/harbor-dual-master-replication-ha/</guid><description>既然使用了外部的服务, 那么高可用的压力自然而然的转移到了外部服务上. 我们一开始采用的外部的 NFS 共享存储服务, 由于我们团队实际情况, 我们暂时还不能保证外部存储的高可用. 同时, 鉴于我们对镜像服务高可用的迫切需求, 决定调研新的 Harbor 的高可用方案.</description></item><item><title>在 kubernetes 中找出过度使用资源的 namespaces</title><link>https://blog.llaoj.cn/posts/2203/find-ns-that-exceed-resource-limits/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/find-ns-that-exceed-resource-limits/</guid><description>我们知道, 在 kubernetes 中, namespace 的资源限制在 ResourceQuota 中定义, 比如我们控制 default 名称空间使用 1核1G 的资源. 通常来讲, 由于 kubernetes 的资源控制机制, &lt;code>.status.used&lt;/code> 中资源的值会小于 &lt;code>.status.hard&lt;/code> 中相应资源的值. 但是也有特例. 当我们开始定义了一个较大的资源限制, 待应用部署完毕, 资源占用了很多之后, 这时调低资源限制. 此时就会出现 &lt;code>.status.used&lt;/code> 中的值超过 &lt;code>.status.hard&lt;/code> 中相应值的情况, 尤其是内存的限制.</description></item><item><title>[译]什么是 eBPF?</title><link>https://blog.llaoj.cn/posts/2203/what-is-ebpf/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/what-is-ebpf/</guid><description>eBPF 程序是事件驱动的, 能在内核或应用程序执行到一个特定的 hook 点时执行. 预定义的 hooks 包含系统调用, 函数出/入口, 内核追踪点, 网络事件等等. 如果预定义 hook 不能满足需求, 也可以创建内核探针(kprobe)或者用户探针(uprobe), 在内核/用户应用程序的任何位置, 把探针附加到 eBPF 程序上.</description></item><item><title>比较冷门但有用的 kubectl 命令</title><link>https://blog.llaoj.cn/posts/2203/kubectl-usefull-command/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/kubectl-usefull-command/</guid><description>以下冷门命令能实现某种具体的功能, 都是在实际工作中摸索总结的经验, 获取到相关的资源名称之后, 就可以配合常用的 kubectl 命令获取其他详细信息.</description></item><item><title>[解决] FailedScheduling pod/&lt;pod-name> pod is &lt;uid> in the cache so can't be assumed</title><link>https://blog.llaoj.cn/posts/2203/pod-cannot-be-assumed/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/pod-cannot-be-assumed/</guid><description>pod is in the cache, so can&amp;rsquo;t be assumed, 这是调度器 scheduler 缓存失效导致的异常事件, 大致原因是 pod 已经调度, 并绑定到指定节点, 由于该节点异常导致启动失败, 重新启动 prometheus statefulset, 让集群重新调度, 其实就是将现有到 prometheus pod 副本数将至 0, 再恢复正常即可.</description></item><item><title>[解决] Warning pod/calico-node-&lt;hash> Readiness probe failed</title><link>https://blog.llaoj.cn/posts/2203/calico-node-readiness-probe-failed/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/calico-node-readiness-probe-failed/</guid><description>calico-node-4fpgp Readiness probe failed, orphaned pod &lt;pod-hash> found, but volume paths are still present on disk : There were a total of N errors similar to this. Turn up verbosity to see them.</description></item><item><title>bcc 之 opensnoop 工具的使用</title><link>https://blog.llaoj.cn/posts/2203/bcc-opensnoop-usage/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/bcc-opensnoop-usage/</guid><description>这篇文档主要演示了 opensnoop(Linux eBPF/bcc) 工具的使用. opensnoop 在系统范围内跟踪 open() 系统调用，并打印各种详细信息.</description></item><item><title>bcc 之 tcplife 工具的使用</title><link>https://blog.llaoj.cn/posts/2203/bcc-tcplife-usage/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/bcc-tcplife-usage/</guid><description>这篇文档主要演示了 tcplife(Linux eBPF/bcc) 工具的使用. tcplife 总结了在跟踪期间打开和关闭的 TCP 会话. 比如</description></item><item><title>Linux 常见错误码</title><link>https://blog.llaoj.cn/posts/2203/linux-error-code/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/linux-error-code/</guid><description>下表是 Linux 操作系统一些常见的错误代码和对应的错误描述 1 EPERM Operation not permitted 2 ENOENT No such file or directory</description></item><item><title>load average 过高, mount nfs 问题处理</title><link>https://blog.llaoj.cn/posts/2203/nfs-options/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/nfs-options/</guid><description>&lt;p>周末, 有一台服务器告警: 系统负载过高, 最高的时候都已经到 100 +, 以下是排查&amp;amp;处理的具体过程.&lt;/p>
&lt;h2 id="发现的问题现象">
 发现的问题/现象
 &lt;a class="anchor" href="#%e5%8f%91%e7%8e%b0%e7%9a%84%e9%97%ae%e9%a2%98%e7%8e%b0%e8%b1%a1">#&lt;/a>
&lt;/h2>
&lt;h3 id="uptime-显示-load-average-都在70">
 &lt;code>uptime&lt;/code> 显示 load average 都在70+
 &lt;a class="anchor" href="#uptime-%e6%98%be%e7%a4%ba-load-average-%e9%83%bd%e5%9c%a870">#&lt;/a>
&lt;/h3>
&lt;p>因为服务器是40核心, 原则上负载40是满负荷, 现在明显存在大量等待的任务. 继续往下分析进程, 看具体那个进程一直在堵塞.&lt;/p>
&lt;h3 id="ps--ef-执行到某一个进程就卡住了">
 &lt;code>ps -ef&lt;/code> 执行到某一个进程就卡住了
 &lt;a class="anchor" href="#ps--ef-%e6%89%a7%e8%a1%8c%e5%88%b0%e6%9f%90%e4%b8%80%e4%b8%aa%e8%bf%9b%e7%a8%8b%e5%b0%b1%e5%8d%a1%e4%bd%8f%e4%ba%86">#&lt;/a>
&lt;/h3>
&lt;p>命令执行如下:&lt;/p></description></item><item><title>容器化部署 openldap</title><link>https://blog.llaoj.cn/posts/2203/openldap-docker/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2203/openldap-docker/</guid><description>&lt;p>使用容器化安装非常便捷, 参考
 &lt;a href="https://github.com/osixia/docker-openldap">osixia/openldap&lt;/a>仓库使用说明安装即可, 如下:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker stop openldap &lt;span style="color:#000;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> docker rm openldap &lt;span style="color:#000;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span>docker run --name openldap --detach &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> -p 389:389 &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> -p 636:636 &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --env &lt;span style="color:#008080">LDAP_ORGANISATION&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;Rutron Net&amp;#34;&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --env &lt;span style="color:#008080">LDAP_DOMAIN&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;rutron.net&amp;#34;&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --env &lt;span style="color:#008080">LDAP_ADMIN_PASSWORD&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#d14">&amp;#34;your-password&amp;#34;&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --env &lt;span style="color:#008080">LDAP_READONLY_USER&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#0086b3">true&lt;/span> &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --env &lt;span style="color:#008080">LDAP_TLS_VERIFY_CLIENT&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>try &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --volume /data/openldap/data:/var/lib/ldap &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --volume /data/openldap/slapd.d:/etc/ldap/slapd.d &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> --hostname ldap.rutron.net &lt;span style="color:#d14">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14">&lt;/span> osixia/openldap:1.5.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好了, 现在该服务同时支持 ldap 和 ldaps 协议, 有一个初始化的账号 &lt;code>readonly/readonly&lt;/code>, 可以使用了~&lt;/p></description></item><item><title>解决 kubelet cannot allocate memory 错误</title><link>https://blog.llaoj.cn/posts/2202/cannot-allocate-memory/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2202/cannot-allocate-memory/</guid><description>&lt;h2 id="问题描述">
 问题描述
 &lt;a class="anchor" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;p>查看 pod 相关 events 如下：&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Events:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Type Reason Age From Message
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ---- ------ ---- ---- -------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal Scheduled 18m default-scheduler Successfully assigned container-186002196200947712/itms-5f6d7798-wrpjj to 10.206.65.144
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Warning FailedCreatePodContainer 3m31s &lt;span style="color:#000;font-weight:bold">(&lt;/span>x71 over 18m&lt;span style="color:#000;font-weight:bold">)&lt;/span> kubelet unable to ensure pod container exists: failed to create container &lt;span style="color:#000;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>kubepods burstable pod31f4c93c-c3a1-49ad-b091-0802c5f1d396&lt;span style="color:#000;font-weight:bold">]&lt;/span> : mkdir /sys/fs/cgroup/memory/kubepods/burstable/pod31f4c93c-c3a1-49ad-b091-0802c5f1d396: cannot allocate memory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是内核bug，建议升级内核&lt;/p></description></item><item><title>使用Kubespray安装kubernetes的教程</title><link>https://blog.llaoj.cn/posts/2202/Kubespray-kubernetes-setup/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2202/Kubespray-kubernetes-setup/</guid><description>&lt;p>本文使用 kubespray 容器部署 kubernetes v1.22, 提供了从国外搬运的离线软件包/容器镜像. 仅需要几步即可部署高可用集群. 所有离线文件都来自官方下载 kubespray 安装过程会进行软件包验证, 放心使用.&lt;/p>
&lt;h2 id="前提">
 前提
 &lt;a class="anchor" href="#%e5%89%8d%e6%8f%90">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>禁用防火墙&lt;/li>
&lt;li>&lt;strong>重要:&lt;/strong> 本文使用 kubespray 的容器环境部署, 为避免影响节点部署(特别是 Runtime 部署), 所以需要一台&lt;strong>独立于集群外的服务器&lt;/strong>执行下面的命令, 这台服务器安装 docker 19.03+ 并到所有节点SSH免密进入.&lt;/li>
&lt;li>目标服务器要允许 IPv4 转发, 如果要给 pods 和 services 用 IPv6, 目标服务器要允许 IPv6 转发.&lt;/li>
&lt;/ul>
&lt;p>注意: 下面配置是适合 kubespray 的配置, 实际配置取决于集群规模.&lt;/p></description></item><item><title>[PPT] 实践中总结 Kubernetes 必须了解的核心内容</title><link>https://blog.llaoj.cn/posts/2202/intro-kubernetes/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2202/intro-kubernetes/</guid><description>&lt;h2 id="ppt-分享">
 PPT 分享
 &lt;a class="anchor" href="#ppt-%e5%88%86%e4%ba%ab">#&lt;/a>
&lt;/h2>
&lt;p>以下是 &amp;lt;实践中总结 Kubernetes 必须了解的核心内容&amp;gt; 主题分享 PPT&lt;/p>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/1.jpg" alt="ppt-page-1" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/3.jpg" alt="ppt-page-3" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/4.jpg" alt="ppt-page-4" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/5.jpg" alt="ppt-page-5" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/6.jpg" alt="ppt-page-6" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/7.jpg" alt="ppt-page-7" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/8.jpg" alt="ppt-page-8" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/9.jpg" alt="ppt-page-9" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/10.jpg" alt="ppt-page-10" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/11.jpg" alt="ppt-page-11" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/12.jpg" alt="ppt-page-12" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/13.jpg" alt="ppt-page-13" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/14.jpg" alt="ppt-page-14" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/15.jpg" alt="ppt-page-15" />&lt;/p>
&lt;hr>
&lt;p>
 &lt;img src="https://blog.llaoj.cn/posts/2202/intro-kubernetes/16.jpg" alt="ppt-page-16" />&lt;/p></description></item><item><title>kubernetes 中的 pod 究竟是什么</title><link>https://blog.llaoj.cn/posts/2202/what-are-kubernetes-pods-anyway/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2202/what-are-kubernetes-pods-anyway/</guid><description>&lt;h2 id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>kubernetes 中 pod 的设计是一个伟大的发明, 今天我很有必要去聊一下 pod 和 container, 探究一下它们究竟是什么? kubernetes 官方文档中关于
 &lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/#pod-storage">pod 概念介绍&lt;/a>提供了一个完整的解释, 但写的不够详细, 表达过于专业, 但还是很推荐大家阅读一下. 当然这篇文档应该更接地气.&lt;/p>
&lt;h2 id="容器真的存在吗">
 容器真的存在吗?
 &lt;a class="anchor" href="#%e5%ae%b9%e5%99%a8%e7%9c%9f%e7%9a%84%e5%ad%98%e5%9c%a8%e5%90%97">#&lt;/a>
&lt;/h2>
&lt;p>linux 中是没有容器这个概念的, 容器就是 linux 中的普通进程, 它使用了 linux 内核提供的两个重要的特性: namespace &amp;amp; cgroups.&lt;/p></description></item><item><title>Prometheus Operator 设计思路</title><link>https://blog.llaoj.cn/posts/2202/prometheus-operator-design/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2202/prometheus-operator-design/</guid><description>&lt;h2 id="设计">
 设计
 &lt;a class="anchor" href="#%e8%ae%be%e8%ae%a1">#&lt;/a>
&lt;/h2>
&lt;p>这篇文章介绍了 Prometheus Operator 的几种自定义资源 (CRD):&lt;/p>
&lt;ul>
&lt;li>Prometheus&lt;/li>
&lt;li>Alertmanager&lt;/li>
&lt;li>ThanosRuler&lt;/li>
&lt;li>ServiceMonitor&lt;/li>
&lt;li>PodMonitor&lt;/li>
&lt;li>Probe&lt;/li>
&lt;li>PrometheusRule&lt;/li>
&lt;li>AlertmanagerConfig&lt;/li>
&lt;/ul>
&lt;h2 id="prometheus">
 Prometheus
 &lt;a class="anchor" href="#prometheus">#&lt;/a>
&lt;/h2>
&lt;p>它定义了在 Kubernetes 集群中安装 Prometheus 的方式. 它提供了一些配置项, 比如副本数、持久卷还有接收告警的 Alertmanagers.&lt;/p></description></item><item><title>使用 velero 备份 kubernetes 指引</title><link>https://blog.llaoj.cn/posts/2202/velero-backup-k8s/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/posts/2202/velero-backup-k8s/</guid><description>&lt;h2 id="要求">
 要求
 &lt;a class="anchor" href="#%e8%a6%81%e6%b1%82">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>kubernetes 版本 1.7+，velero 的每个主版本对 kuberetes 的版本要求不同，详情请参考官方文档说明。
 &lt;a href="https://velero.io/docs/v1.7/">官方文档通道&lt;/a>&lt;/li>
&lt;li>velero 所在服务器有 kubectl 命令, 且能连上集群&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>我们先从最简单的体验开始&lt;/strong>&lt;/p>
&lt;h2 id="1-安装-velero-客户端">
 1. 安装 velero 客户端
 &lt;a class="anchor" href="#1-%e5%ae%89%e8%a3%85-velero-%e5%ae%a2%e6%88%b7%e7%ab%af">#&lt;/a>
&lt;/h2>
&lt;p>下载二进制安装包, 点击 latest release, 下载 &lt;code>velero-v1.7.0-linux-amd64.tag.gz&lt;/code> (以 release 页面为准), 解压&lt;/p></description></item></channel></rss>