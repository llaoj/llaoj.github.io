<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OAuth2&amp;SSO on 老J的博客</title><link>https://blog.llaoj.cn/docs/oauth2nsso/</link><description>Recent content in OAuth2&amp;SSO on 老J的博客</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://blog.llaoj.cn/docs/oauth2nsso/index.xml" rel="self" type="application/rss+xml"/><item><title>配置</title><link>https://blog.llaoj.cn/docs/oauth2nsso/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/docs/oauth2nsso/configuration/</guid><description>配置 # 该项目的配置修改都是在配置文件中完成的，配置文件在启动应用的时候通过--config=标签进行配置.
配置文件介绍如下：
# session 相关配置session:name:session_idsecret_key:&amp;#34;kkoiybh1ah6rbh0&amp;#34;# 过期时间# 单位秒# 默认20分钟max_age:1200# 用户登录验证方式# 支持: db ldapauth_mode:ldap# 数据库相关配置# 这里可以添加多个连接支持# 默认是 default 连接db:default:type:mysqlhost:stringport:3306user:123password:abcdbname:oauth2nssoldap:# 服务地址# 支持 ldap ldapsurl:ldap://ldap.forumsys.com# url: ldaps://ldap.rutron.net# 查询使用的DNsearch_dn:cn=read-only-admin,dc=example,dc=com# 查询使用DN的密码search_password:password# 基础DN# 以此为基础开始查找用户base_dn:dc=example,dc=com# 查询用户的Filter# 比如: # (&amp;amp;(uid=%s)) # 或 (&amp;amp;(objectClass=organizationalPerson)(uid=%s))# 其中, (uid=%s) 表示使用 uid 属性检索用户, # %s 为用户名, 这一段必须要有, 可以替换 uid 以使用其他属性检索用户名filter:(&amp;amp;(uid=%s))# 可选# redis 相关配置# 可以提供:# - 统一回话存储# - oauth2 client 存储redis:default:addr:127.0.0.1:6379password:db:0# oauth2 相关配置oauth2:# access_token 过期时间# 单位小时# 默认2小时access_token_exp:2# 签名 jwt access_token 时所用 keyjwt_signed_key:&amp;#34;k2bjI75JJHolp0i&amp;#34;# oauth2 客户端配置# 数组类型# 可配置多客户端client:# 客户端id 必须全局唯一- id:test_client_1# 客户端 secretsecret:test_secret_1# 应用名 在页面上必要时进行显示name:测试应用1# 客户端 domain# !</description></item><item><title>API列表</title><link>https://blog.llaoj.cn/docs/oauth2nsso/apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/docs/oauth2nsso/apis/</guid><description>API列表 # 1 authorization_code # 1-1 获取授权code # 请求方式
GET /authorize
参数说明
参数 类型 说明 client_id string 在oauth2 server注册的client_id,见配置文件 oauth2.client.id response_type string 固定值:code scope string 权限范围,如:str1,str2,str3,str为配置文件中 oauth2.client.scope.id的值 state string 表示客户端的当前状态,可以指定任意值,认证服务器会原封不动地返回这个值 redirect_uri string 回调uri,会在后面添加query参数?code=xxx&amp;amp;state=xxx,发放的code就在其中 请求示例
# 浏览器请求 http://localhost:9096/authorize?client_id=test_client_1&amp;amp;response_type=code&amp;amp;scope=all&amp;amp;state=xyz&amp;amp;redirect_uri=http://localhost:9093/cb # 302跳转,返回code http://localhost:9093/cb?code=XUNKO4OPPROWAPFKEWNZWA&amp;amp;state=xyz 1-2 使用code交换token # 请求方式
POST /token
请求头 Authorization</description></item><item><title>部署</title><link>https://blog.llaoj.cn/docs/oauth2nsso/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/docs/oauth2nsso/deploy/</guid><description>部署 # 修改配置和完善代码 # 克隆到代码之后，首先需要进行配置文件的修改和部分代码逻辑的编写：
# 克隆源码 git clone git@github.com:llaoj/oauth2nsso.git cd oauth2nsso # 根据实际情况修改配置 cp config.example.yaml /etc/oauth2nsso/config.yaml vi /etc/oauth2nsso/config.yaml ... # 如果使用 LDAP方式 验证用户, 直接修改配置文件即可 # OR # 如果使用 数据库方式 验证用户, 需要修改源码 # 主要修改登录部分逻辑: # 文件: model/user.go:21 # 方法: Authentication() ... 使用docker部署 # [推荐] 容器化部署比较方便进行大规模部署，是当下的趋势。需要本地有 docker 环境。
# 构建镜像 docker build -t &amp;lt;image:tag&amp;gt; . # 运行 docker run --rm --name=oauth2nsso --restart=always -d \ -p 9096:9096 \ -v &amp;lt;path to config.</description></item><item><title>说明</title><link>https://blog.llaoj.cn/docs/oauth2nsso/note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/docs/oauth2nsso/note/</guid><description>版本说明 # v0.2.0 # 该项目发布以来收到了很多朋友的关注，很多公司都将它应用到了一些比较重要的项目中。同时，也对该项目提出了很多要求。综合这些，开发了这个版本。同时希望朋友们互相交流，多提意见。
这个版本主要有下面几个改动：
由于 go-oauth2.v3 版本安全性原因，将该包升级到 v4 丰富了可配置的项目 增加了容器化部署的脚本和相关文档 多了一些细节的优化 增加了错误页面 用户验证增加了LDAP支持</description></item><item><title>示例</title><link>https://blog.llaoj.cn/docs/oauth2nsso/demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/docs/oauth2nsso/demo/</guid><description>示例 # 单点登录演示 # 现在有两个应用测试应用1和测试应用2
登录 # 测试应用1 测试应用2 点击其中一个应用, 要求登录, 输入admin/admin实完成登录, OAuth2NSSO会回掉返回code, 使用code该应用可以调用 接口1-2 获取access_token.
再次点击另外一个应用, 无需登录, 直接回掉返回code. 同样, 使用code该应用可以调用 接口1-2 获取access_token.
退出 # 在测试应用1或测试应用2中都可以调用退出逻辑
退出 点击退出按钮, 会重新回到登录页面, 该服务退出后, 再次点击测试应用1/测试应用2会要求登录.</description></item><item><title>接入指引</title><link>https://blog.llaoj.cn/docs/oauth2nsso/for-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.llaoj.cn/docs/oauth2nsso/for-client/</guid><description>客户端接入 # 下面是用户第一次登录客户端(待接入应用)过程的时序图, 图中标明了 API 调用时机, 可以参考该流程接入SSO</description></item></channel></rss>